{"version":3,"sources":["utils/minimax.js","utils/moveIA.js","contexts/GameContext.js","assets/crossBoard.svg","assets/circleBoard.svg","components/Cell/index.js","components/Board/index.js","components/ScoreBoard/index.js","assets/backicon.svg","assets/reloadicon.svg","components/Button/index.js","assets/blobbottomleft.svg","assets/blobbottomleftshadow.svg","assets/blobbottomright.svg","assets/blobbottomrightshadow.svg","components/Blobs/index.js","components/CloseSVG/index.js","components/WinnerScreen/index.js","utils/boardLogic.js","components/GameLayout/index.js","utils/turn.js","providers/GameProvider.js","pages/Game/index.js"],"names":["minimax","board","depth","player","best_node","someoneWin","get_score","emptyCells","cell","pos_x","pos_y","current_node","winPlayer","length","winner_line","list_state_winner","i","winner_pos","j","push","winnerState","line_filled","empty_cells_pos","STATE_WINNER","moveIA","matrix","setMatrix","turn","changeTurn","newMatrix","bestMove","GameContext","createContext","displayName","Cell","type","selectCell","className","onClick","src","cross","alt","circle","React","memo","prevProps","nextProps","Board","size","useContext","BoardSpace","styled","div","useEffect","useCallback","posX","posY","map","rows","ScoreBoard","Button","srcIcon","typeStyle","path","to","Blobs","blobbottomleft","blobbottomleftshadow","blobbottomright","blobbottomrightshadow","CloseSVG","props","width","height","viewBox","d","fill","fillOpacity","WinnerScreen","winner","useState","modalIsOpen","setIsOpen","window","location","reload","BoardLogic","this","create_matrix","console","log","GameLayout","setWinner","Math","floor","random","newBoard","fullCells","DegradedReactangle","refreshPage","backicon","reloadicon","GameProvider","children","setTurn","Provider","value","GamePage"],"mappings":"wTAAaA,EAAU,SAAVA,EAAWC,EAAOC,EAAOC,GACpC,IAAIC,EAQJ,GALEA,EADa,IAAXD,EACU,EAAE,GAAG,GAAI,KAET,EAAE,GAAG,EAAG,KAGR,IAAVD,GAAeG,EAAWJ,GAE5B,MAAO,EAAE,GAAG,EADAK,EAAUL,IAVuB,oBAc9BM,EAAWN,IAdmB,IAc/C,2BAAoC,CAAC,IAA5BO,EAA2B,QAC9BC,EAAQD,EAAK,GACbE,EAAQF,EAAK,GACjBP,EAAMQ,GAAOC,GAASP,EAEtB,IAAIQ,EAAeX,EAAQC,EAAOC,EAAQ,GAAIC,GAE9CF,EAAMQ,GAAOC,GAAS,EACtBC,EAAa,GAAKF,EAClBE,EAAa,GAAKD,EAGH,IAAXP,EACEQ,EAAa,GAAKP,EAAU,KAC9BA,EAAYO,GAGVA,EAAa,GAAKP,EAAU,KAC9BA,EAAYO,IAhC6B,8BAqC/C,OAAOP,GAuCHC,EAAa,SAACJ,GAGlB,OAAOW,EAAUX,EAFH,IAEoBW,EAAUX,GADhC,IAIDW,EAAY,SAACX,EAAOE,GAC/B,IAAKF,EAAMY,OAAQ,OAAO,EAE1B,IADA,IAAIC,EA5Cc,SAACb,GAGnB,IAFA,IAAIc,EAAoB,GAEfC,EAAI,EAAGA,EAAIf,EAAMY,OAAQG,IAAK,CAErC,IADA,IAAIC,EAAa,GACRC,EAAI,EAAGA,EAAIjB,EAAMY,OAAQK,IAChCD,EAAWE,KAAKlB,EAAMe,GAAGE,IAE3BH,EAAkBI,KAAKF,GAIzB,IAAK,IAAID,EAAI,EAAGA,EAAIf,EAAMY,OAAQG,IAAK,CAErC,IADA,IAAIC,EAAa,GACRC,EAAI,EAAGA,EAAIjB,EAAMY,OAAQK,IAChCD,EAAWE,KAAKlB,EAAMiB,GAAGF,IAE3BD,EAAkBI,KAAKF,GAKzB,IADA,IAAIA,EAAa,GACRD,EAAI,EAAGA,EAAIf,EAAMY,OAAQG,IAChCC,EAAWE,KAAKlB,EAAMe,GAAGA,IAE3BD,EAAkBI,KAAKF,GAGvBA,EAAa,GACb,IAAK,IAAID,EAAI,EAAGA,EAAIf,EAAMY,OAAQG,IAChCC,EAAWE,KAAKlB,EAAMe,GAAIf,EAAMY,OAAS,EAAKG,IAGhD,OADAD,EAAkBI,KAAKF,GAChBF,EAWWK,CAAYnB,GACrBe,EAAI,EAAGA,EAAIF,EAAYD,OAAQG,IAAK,CAE3C,IADA,IAAIK,EAAc,EACTH,EAAI,EAAGA,EAAIjB,EAAMY,OAAQK,IAC5BJ,EAAYE,GAAGE,KAAOf,GACxBkB,IAGJ,GAAIA,IAAgBpB,EAAMY,OACxB,OAAO,EAGX,OAAO,GAGHP,EAAY,SAACL,GAajB,OARIW,EAAUX,EAHA,GAIJ,EACCW,EAAUX,GAJT,IAKD,EAED,GAMCM,EAAa,SAACN,GAEzB,IADA,IAAIqB,EAAkB,GACbN,EAAI,EAAGA,EAAIf,EAAMY,OAAQG,IAChC,IAAK,IAAIE,EAAI,EAAGA,EAAIjB,EAAMY,OAAQK,IACZ,IAAhBjB,EAAMe,GAAGE,IACXI,EAAgBH,KAAK,CAACH,EAAEE,IAI9B,OAAOI,GAeIC,EACD,EADCA,GAEH,EAFGA,EAGF,EC5IEC,EAAS,SAACC,EAAQC,EAAWC,EAAMC,GAC9C,IAAMC,EAAS,YAAOJ,GAClBK,EAAW9B,EAAQyB,EAAOlB,EAAWkB,GAAQZ,OAAOc,IAEnC,IAAjBG,EAAS,KAA8B,IAAjBA,EAAS,KACjCD,EAAUC,EAAS,IAAIA,EAAS,IAAMH,EACtCD,EAAUG,IAEZD,GAAYD,ICRRI,EAAcC,wBAAc,CAChCL,KAAM,EACNC,WAAY,eAGdG,EAAYE,YAAc,cAEXF,QCTA,G,MAAA,IAA0B,wCCA1B,MAA0B,wCCKnCG,EAAO,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,WACnB,OACE,qCACa,IAATD,GAAc,wBAAQE,UAAU,aAAaC,QAASF,IAC7C,IAATD,GAAc,qBAAKE,UAAU,aAAf,SACd,qBAAKA,UAAU,QAAQE,IAAKC,EAAOC,IAAI,aAE7B,IAAVN,GAAe,qBAAKE,UAAU,cAAf,SACf,qBAAKA,UAAU,SAASE,IAAKG,EAAQD,IAAI,iBAMlCE,MAAMC,KAAKV,GAAM,SAACW,EAAWC,GAC1C,OAAOD,EAAUV,OAASW,EAAUX,Q,uOCbtC,IA6CeY,EA7CD,SAAC,GAAmC,IAAD,IAAjCC,YAAiC,MAA1B,EAA0B,EAAvBvB,EAAuB,EAAvBA,OAAQC,EAAe,EAAfA,UAAe,EAI3CuB,qBAAWlB,GAFbJ,EAF6C,EAE7CA,KACAC,EAH6C,EAG7CA,WAIIsB,EAAaC,IAAOC,IAAV,IAEgBJ,EAHT,WASvBK,qBAAU,YACM,IAAV1B,GACFH,EAAOC,EAAQC,EAAWC,EAAMC,KAEjC,CAACH,EAAQE,EAAMC,EAAYF,IAE9B,IAAMU,EAAakB,uBAAY,SAACC,EAAMC,EAAM/B,GAC1C,IAAMI,EAAS,YAAOJ,GACtBI,EAAU0B,GAAMC,GAAQ7B,EACxBD,EAAUG,GACVD,GAAYD,KACX,IAEH,OACE,yBAASU,UAAU,QAAnB,SACE,qBAAKA,UAAU,kBAAf,SACE,cAACa,EAAD,CAAYF,KAAMA,EAAlB,SACIvB,EAAOgC,KAAI,SAACC,EAAMH,GAAP,OACXG,EAAKD,KAAI,SAACjD,EAAMgD,GAAP,OACL,cAAC,EAAD,CACMrB,KAAM3B,EACN4B,WAAY,kBAAMA,EAAWmB,EAAKC,EAAM/B,KAFnC+B,gBCtCrBG,G,MAAa,WACjB,OACE,yBAAStB,UAAU,aAAnB,SACE,sBAAKA,UAAU,uBAAf,UACE,qBAAKA,UAAU,UAAf,SACE,wCAEF,qBAAKA,UAAU,SAAf,SACE,wCAEF,qBAAKA,UAAU,UAAf,SACE,+CAOKM,MAAMC,KAAKe,GCrBX,MAA0B,qCCA1B,MAA0B,uC,QCKnCC,G,MAAS,SAAC,GAA4D,IAA1DC,EAAyD,EAAzDA,QAASpB,EAAgD,EAAhDA,IAAgD,IAA3CqB,iBAA2C,MAA/B,UAA+B,EAApBC,EAAoB,EAApBA,KAAMzB,EAAc,EAAdA,QAC3D,OACI,cAAC,IAAD,CAAMD,UAAWyB,EAAWE,GAAID,EAAMzB,QAASA,EAA/C,SACI,qBAAKC,IAAKsB,EAASpB,IAAKA,QASnBE,MAAMC,KAAKgB,GCjBX,MAA0B,2CCA1B,MAA0B,iDCA1B,MAA0B,4CCA1B,MAA0B,kDCOnCK,G,MAAQ,WACZ,OACE,sBAAK5B,UAAU,QAAf,UACE,qBAAKA,UAAU,mBAAmBE,IAAK2B,EAAgBzB,IAAI,qBAC3D,qBAAKJ,UAAU,0BAA0BE,IAAK4B,EAAsB1B,IAAI,4BACxE,qBAAKJ,UAAU,oBAAoBE,IAAK6B,EAAiB3B,IAAI,sBAC7D,qBAAKJ,UAAU,2BAA2BE,IAAK8B,EAAuB5B,IAAI,kCAKjEE,MAAMC,KAAKqB,G,gBCCXK,MAjBf,SAAkBC,GAChB,OACE,6CACEC,MAAO,IACPC,OAAQ,IACRC,QAAQ,eACJH,GAJN,aAME,sBACEI,EAAE,oIACFC,KAAK,UACLC,YAAa,SCuBNC,EA/BM,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAAa,EACHC,oBAAS,GADN,mBAC5BC,EAD4B,KAChBC,EADgB,KAQnC,OACE,mCACGD,GACD,yBAAS5C,UAAU,mBAAnB,SACE,sBAAKA,UAAU,kBAAf,UACE,qBAAKA,UAAU,eAAf,SACE,wBAAQC,QAXC,WACjB4C,GAAU,GACVC,OAAOC,SAASC,UASR,SACE,cAAC,EAAD,CAAUhD,UAAU,kBAClBmC,MAAM,OACNC,OAAO,aAGb,sBAAKpC,UAAU,aAAf,UACI0C,IAAWxD,GAAsB,oDACjCwD,IAAWxD,GAAmB,8CAC9BwD,IAAWxD,GAAqB,yD,gBC5BzB+D,E,WACnB,WAAYtC,GAAO,oBACjBuC,KAAKvC,KAAOA,EACZuC,KAAK9D,OAAS8D,KAAKC,cAAcxC,G,0DAGrBA,GAEZ,IADA,IAAIvB,EAAS,GACJT,EAAI,EAAGA,EAAIgC,EAAMhC,IAAK,CAE7B,IADA,IAAI0C,EAAO,GACFxC,EAAI,EAAGA,EAAI8B,EAAM9B,IACxBwC,EAAKvC,KAAK,GAEZM,EAAON,KAAKuC,GAEd,OAAOjC,I,4BAGHA,GACJ,IAAK,IAAIT,EAAI,EAAGA,EAAIS,EAAOZ,OAAQG,IAC/ByE,QAAQC,IAAIjE,EAAOT,Q,+KCL3B,IAsEe2E,EAtEI,WAAO,IAAD,EACKX,mBAAS,IADd,mBAChBvD,EADgB,KACRC,EADQ,OAEKsD,mBAAS,GAFd,mBAEhBD,EAFgB,KAERa,EAFQ,OAMnB3C,qBAAWlB,GAFbJ,EAJqB,EAIrBA,KACAC,EALqB,EAKrBA,WAGFyB,qBAAU,WACRzB,ECvBW,CAAC,GAAG,GACHiE,KAAKC,MAAsB,EAAhBD,KAAKE,YDuB5B,IAAIC,EAAW,IAAIV,EAAW,GAC9B5D,EAAUsE,EAASvE,UACnB,IAEF4B,qBAAU,WAEJzC,EAAUa,EAAQF,KACpBkE,QAAQC,IAAI,iBACZE,EAAUrE,IAERX,EAAUa,EAAQF,KACpBkE,QAAQC,IAAI,aACZE,EAAUrE,InB0FS,SAACtB,GACxB,IAAKA,EAAMY,OAAQ,OAAO,EAC1B,IAAK,IAAIG,EAAI,EAAGA,EAAIf,EAAMY,OAAQG,IAChC,IAAK,IAAIE,EAAI,EAAGA,EAAIjB,EAAMY,OAAQK,IAChC,GAAoB,IAAhBjB,EAAMe,GAAGE,GACX,OAAO,EAIb,OAAO,EmBjGD+E,CAAUxE,KACZgE,QAAQC,IAAI,cACZE,EAAUrE,MAEX,CAACI,IAEJ,IAOMuE,EAAqB/C,IAAOC,IAAV,IAHN,IAATzB,EAFI,UACD,UAHO,mBAabwE,EAAc7C,uBAAY,WAC5B6B,OAAOC,SAASC,WACf,IAEL,OACE,sBAAKhD,UAAU,aAAf,UACE,cAAC6D,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,CAAOzE,OAAQA,EAAQC,UAAWA,IAClC,0BAASW,UAAU,UAAnB,UACE,cAAC,EAAD,CAAQwB,QAASuC,EACf3D,IAAI,WACJqB,UAAU,UACVC,KAAK,MACP,cAAC,EAAD,CAAQF,QAASwC,EACf5D,IAAI,WACJqB,UAAU,YACVC,KAAK,QAAQzB,QAAS6D,OAE1B,cAAC,EAAD,IACEpB,IAAWxD,GAAsB,cAAC,EAAD,CAAcwD,OAAQxD,IACvDwD,IAAWxD,GAAmB,cAAC,EAAD,CAAcwD,OAAQxD,IACpDwD,IAAWxD,GAAqB,cAAC,EAAD,CAAcwD,OAAQxD,QE1D/C+E,EAnBM,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACbvB,mBAAS,GADI,mBAC9BrD,EAD8B,KACxB6E,EADwB,KAOrC,OACE,cAAC,EAAYC,SAAb,CACEC,MAAO,CACL/E,OACAC,WARa,SAACD,GAClB6E,EAAQ7E,KAIR,SAMG4E,KCLQI,UARE,WACf,OACI,cAAC,EAAD,UACE,cAAC,EAAD","file":"static/js/3.9d85d03e.chunk.js","sourcesContent":["export const minimax = (board, depth, player) => {\n  let best_node;\n\n  if (player === 1) {\n    best_node = [-1,-1, -1000];\n  } else {\n    best_node = [-1,-1, 1000];\n  }\n\n  if (depth === 0 || someoneWin(board)) {\n    let score = get_score(board);\n    return [-1,-1,score];\n  }\n  \n  for (let cell of emptyCells(board)) {\n    let pos_x = cell[0];\n    let pos_y = cell[1];\n    board[pos_x][pos_y] = player;\n\n    let current_node = minimax(board, depth - 1, -player);\n\n    board[pos_x][pos_y] = 0;\n    current_node[0] = pos_x;\n    current_node[1] = pos_y;\n    \n\n    if (player === 1) {\n      if (current_node[2] > best_node[2]) {\n        best_node = current_node;\n      }\n    } else {\n      if (current_node[2] < best_node[2]) {\n        best_node = current_node;\n      }\n    }\n  }\n\n  return best_node;\n}\n\nconst winnerState = (board) => {\n  let list_state_winner = [];\n  // horizontal lines \n  for (let i = 0; i < board.length; i++) {\n    let winner_pos = [];\n    for (let j = 0; j < board.length; j++) {\n      winner_pos.push(board[i][j]);\n    }\n    list_state_winner.push(winner_pos);\n  }\n\n  // vertical lines\n  for (let i = 0; i < board.length; i++) {\n    let winner_pos = [];\n    for (let j = 0; j < board.length; j++) {\n      winner_pos.push(board[j][i]);\n    }\n    list_state_winner.push(winner_pos);\n  }\n\n  // principal diagonal \n  let winner_pos = [];\n  for (let i = 0; i < board.length; i++) {\n    winner_pos.push(board[i][i]);\n  }\n  list_state_winner.push(winner_pos);\n\n  // secondary diagonal \n  winner_pos = [];\n  for (let i = 0; i < board.length; i++) {\n    winner_pos.push(board[i][(board.length - 1) - i]); \n  }\n  list_state_winner.push(winner_pos);\n  return list_state_winner;\n}\n\nconst someoneWin = (board) => {\n  const HUMAN = +1;\n  const IA = -1;\n  return winPlayer(board, HUMAN) || winPlayer(board, IA); \n}\n\nexport const winPlayer = (board, player) => {\n  if (!board.length) return false  \n  let winner_line = winnerState(board);\n  for (let i = 0; i < winner_line.length; i++) {\n    let line_filled = 0;\n    for (let j = 0; j < board.length; j++) {\n      if (winner_line[i][j] === player) {\n        line_filled++;\n      }\n    }\n    if (line_filled === board.length) {\n      return true;\n    }\n  }\n  return false;\n}\n\nconst get_score = (board) => {\n  let score = 0;\n  const HUMAN = +1;\n  const IA = -1;\n\n  if (winPlayer(board, HUMAN)) {\n    score = +1;\n  } else if (winPlayer(board, IA)) {\n    score = -1;\n  } else {\n    score = 0;\n  }\n\n  return score;\n}\n\nexport const emptyCells = (board) => {\n  let empty_cells_pos = [];\n  for (let i = 0; i < board.length; i++) {\n    for (let j = 0; j < board.length; j++) {\n      if (board[i][j] === 0) {\n        empty_cells_pos.push([i,j]);\n      }\n    }\n  }\n  return empty_cells_pos;\n}\n\nexport const fullCells = (board) => {\n  if (!board.length) return false;\n  for (let i = 0; i < board.length; i++) {\n    for (let j = 0; j < board.length; j++) {\n      if (board[i][j] === 0) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\nexport const STATE_WINNER = {\n  'HUMAN' : +1,\n  'IA' : -1,\n  'NONE' : 0\n}","import { minimax, emptyCells } from \"utils/minimax\";\n\nexport const moveIA = (matrix, setMatrix, turn, changeTurn) => {\n  const newMatrix = [...matrix];\n  let bestMove = minimax(matrix,emptyCells(matrix).length,turn);\n\n  if (bestMove[0] !== -1 || bestMove[1] !== -1) {\n    newMatrix[bestMove[0]][bestMove[1]] = turn;\n    setMatrix(newMatrix);\n  }\n  changeTurn(-turn);\n}\n\n","import { createContext } from \"react\";\n\nconst GameContext = createContext({\n  turn: 1,\n  changeTurn: () => {}\n});\n\nGameContext.displayName = \"GameContext\";\n\nexport default GameContext;","export default __webpack_public_path__ + \"static/media/crossBoard.ecca2184.svg\";","export default __webpack_public_path__ + \"static/media/circleBoard.bf8de4ce.svg\";","import React from 'react';\nimport \"./style.scss\";\nimport cross from \"assets/crossBoard.svg\";\nimport circle from \"assets/circleBoard.svg\";\n\nconst Cell = ({type, selectCell}) => {\n  return (\n    <>\n      { type === 0 && <button className=\"cell-empty\" onClick={selectCell}></button> }\n      { type === 1 && <div className=\"cell-cross\">\n        <img className=\"cross\" src={cross} alt=\"cross\"/>\n      </div> }\n      { type === -1 && <div className=\"cell-circle\">\n        <img className=\"circle\" src={circle} alt=\"circle\"/>\n      </div> }\n    </>\n  )\n}\n\nexport default React.memo(Cell, (prevProps, nextProps) => {\n  return prevProps.type === nextProps.type\n})\n","import React, { useCallback, useEffect, useContext} from 'react';\nimport { moveIA } from 'utils/moveIA'\nimport GameContext from \"contexts/GameContext\";\nimport Cell from \"components/Cell\";\nimport styled from 'styled-components';\nimport './style.scss'\n\nconst Board = ({size = 3, matrix, setMatrix}) => {\n  const {\n    turn,\n    changeTurn\n  } = useContext(GameContext);\n\n  const secondaryColor = \"#470147\"\n  const BoardSpace = styled.div`\n  display: grid;\n  grid-template-columns: repeat(${size}, auto);\n  background-color: ${secondaryColor};\n  border-radius: 10px;\n  padding: calc(2px + 0.3vw);\n  `\n\n  useEffect(() => {\n    if (turn === -1) {\n      moveIA(matrix, setMatrix, turn, changeTurn);\n    }\n  }, [matrix, turn, changeTurn, setMatrix]);\n\n  const selectCell = useCallback((posX, posY, matrix) => {\n    const newMatrix = [...matrix];\n    newMatrix[posX][posY] = turn;\n    setMatrix(newMatrix);\n    changeTurn(-turn);\n  }, [])\n\n  return (\n    <section className=\"board\">\n      <div className=\"board-container\">\n        <BoardSpace size={size}>\n          { matrix.map((rows, posX) =>\n            rows.map((cell, posY) => \n                <Cell key={posY} \n                      type={cell}\n                      selectCell={() => selectCell(posX,posY, matrix)}/>\n              )\n          )}\n        </BoardSpace>\n      </div>\n    </section>\n  )\n}\n\nexport default Board;\n","import React from 'react';\nimport \"./style.scss\";\n\nconst ScoreBoard = () => {\n  return (\n    <section className=\"scoreboard\">\n      <div className=\"scoreboard-container\">\n        <div className=\"player1\">\n          <span>P1</span>\n        </div>\n        <div className=\"versus\">\n          <span>VS</span>\n        </div>\n        <div className=\"player2\">\n          <span>IA</span>\n        </div>\n      </div>\n    </section>\n  )\n}\n\nexport default React.memo(ScoreBoard)\n","export default __webpack_public_path__ + \"static/media/backicon.28203c5f.svg\";","export default __webpack_public_path__ + \"static/media/reloadicon.d60843c3.svg\";","import React from 'react'\nimport { Link } from \"react-router-dom\";\nimport PropTypes from 'prop-types'\nimport './style.scss'\n\nconst Button = ({ srcIcon, alt, typeStyle = \"primary\", path, onClick }) => {\n  return (\n      <Link className={typeStyle} to={path} onClick={onClick}>\n          <img src={srcIcon} alt={alt} />\n      </Link>\n  )\n}\n\nButton.propTypes = {\n  typeStyle: PropTypes.oneOf([\"primary\", \"secondary\"])\n}\n\nexport default React.memo(Button)","export default __webpack_public_path__ + \"static/media/blobbottomleft.99908a78.svg\";","export default __webpack_public_path__ + \"static/media/blobbottomleftshadow.bbcd3c4b.svg\";","export default __webpack_public_path__ + \"static/media/blobbottomright.16d6e69d.svg\";","export default __webpack_public_path__ + \"static/media/blobbottomrightshadow.57929ffb.svg\";","import React from 'react'\nimport blobbottomleft from \"../../assets/blobbottomleft.svg\";\nimport blobbottomleftshadow from \"../../assets/blobbottomleftshadow.svg\";\nimport blobbottomright from \"../../assets/blobbottomright.svg\";\nimport blobbottomrightshadow from \"../../assets/blobbottomrightshadow.svg\";\nimport './style.scss'\n\nconst Blobs = () => {\n  return (\n    <div className=\"blobs\">\n      <img className=\"blob-bottom-left\" src={blobbottomleft} alt=\"blob-bottom-left\"/>\n      <img className=\"blob-bottom-left-shadow\" src={blobbottomleftshadow} alt=\"blob-bottom-left-shadow\"/>\n      <img className=\"blob-bottom-right\" src={blobbottomright} alt=\"blob-bottom-right\"/>\n      <img className=\"blob-bottom-right-shadow\" src={blobbottomrightshadow} alt=\"blob-bottom-right-shadow\"/>\n    </div>\n  )\n}\n\nexport default React.memo(Blobs)","import * as React from \"react\"\n\nfunction CloseSVG(props) {\n  return (\n    <svg\n      width={224}\n      height={224}\n      viewBox=\"0 0 224 224\"\n      {...props}\n    >\n      <path\n        d=\"M224 22.56L201.44 0 112 89.44 22.56 0 0 22.56 89.44 112 0 201.44 22.56 224 112 134.56 201.44 224 224 201.44 134.56 112 224 22.56z\"\n        fill=\"#C1C1C1\"\n        fillOpacity={0.8}\n      />\n    </svg>\n  )\n}\n\nexport default CloseSVG","import React, { useState } from 'react'\nimport { STATE_WINNER } from 'utils/minimax'\nimport './style.scss'\nimport CloseSVG from 'components/CloseSVG'\n\nconst WinnerScreen = ({ winner }) => {\n  const [modalIsOpen,setIsOpen] = useState(true);\n\n  const closeModal = () => {\n    setIsOpen(false);\n    window.location.reload()\n  }\n\n  return (\n    <>\n      {modalIsOpen && \n      <section className=\"modal-background\">\n        <div className=\"modal-container\">\n          <div className=\"header-modal\">\n            <button onClick={closeModal}>\n              <CloseSVG className=\"close-container\"\n                width=\"20px\" \n                height=\"20px\" />\n            </button>\n          </div>\n          <div className=\"main-modal\">\n            { winner === STATE_WINNER.HUMAN && <span>Winner: Player 1</span> }\n            { winner === STATE_WINNER.IA && <span>Winner: IA</span> }\n            { winner === STATE_WINNER.NONE && <span>Not Winner</span> }\n          </div>\n        </div>\n      </section> }\n    </>\n  )\n}\n\nexport default WinnerScreen\n","export default class BoardLogic {\n  constructor(size) {\n    this.size = size;\n    this.matrix = this.create_matrix(size);\n  }\n\n  create_matrix(size) {\n    let matrix = [];\n    for (let i = 0; i < size; i++) {\n      let rows = [];\n      for (let j = 0; j < size; j++) {\n        rows.push(0);\n      }\n      matrix.push(rows);\n    }\n    return matrix;\n  }\n\n  print(matrix) {\n    for (let i = 0; i < matrix.length; i++) {\n        console.log(matrix[i]);\n    }\n  }\n}","import React, {useState, useEffect, useCallback, useContext} from 'react';\nimport \"./style.scss\"\nimport Board from \"components/Board\";\nimport ScoreBoard from \"components/ScoreBoard\";\nimport backicon from \"assets/backicon.svg\";\nimport reloadicon from \"assets/reloadicon.svg\";\nimport {randomTurnSelection} from \"utils/turn\";\nimport GameContext from \"contexts/GameContext\";\nimport Button from 'components/Button';\nimport Blobs from \"components/Blobs\"\nimport styled from 'styled-components';\nimport { STATE_WINNER, winPlayer, fullCells } from 'utils/minimax'\nimport WinnerScreen from 'components/WinnerScreen';\nimport BoardLogic from \"utils/boardLogic\"\n\nconst GameLayout = () => {\n  const [matrix, setMatrix] = useState([])\n  const [winner, setWinner] = useState(2)\n  const {\n    turn,\n    changeTurn\n  } = useContext(GameContext)\n\n  useEffect(() => {\n    changeTurn(randomTurnSelection())\n    let newBoard = new BoardLogic(3);\n    setMatrix(newBoard.matrix);\n  },[])\n\n  useEffect(() => {\n    // Check someone win\n    if (winPlayer(matrix, STATE_WINNER.HUMAN)) {\n      console.log(\"Winner Humman\");\n      setWinner(STATE_WINNER.HUMAN)\n    }\n    if (winPlayer(matrix, STATE_WINNER.IA)) {\n      console.log(\"Winner IA\");\n      setWinner(STATE_WINNER.IA)\n    }\n    if (fullCells(matrix)) {\n      console.log(\"Not Winner\");\n      setWinner(STATE_WINNER.NONE)\n    }\n  }, [turn])\n\n  const blackColor = \"rgb(27, 27, 27)\"\n  const colorTurn = () => {\n    let blue = \"#206357\";\n    let red = \"#792929\";\n    return turn === 1 ? blue : red;\n  }\n\n  const DegradedReactangle = styled.div`\n    background-image: linear-gradient( ${colorTurn()} , ${blackColor});\n    padding: 25px;\n    margin-bottom: 2vh;\n  `\n\n  const refreshPage = useCallback(() => {\n      window.location.reload()\n    }, [])\n\n  return (\n    <div className=\"gamelayout\">\n      <DegradedReactangle />\n      <ScoreBoard></ScoreBoard>\n      <Board matrix={matrix} setMatrix={setMatrix}></Board>\n      <section className=\"actions\">\n        <Button srcIcon={backicon}\n          alt=\"backicon\"\n          typeStyle=\"primary\" \n          path=\"/\" />\n        <Button srcIcon={reloadicon}\n          alt=\"backicon\" \n          typeStyle=\"secondary\" \n          path=\"/game\" onClick={refreshPage} />\n      </section>\n      <Blobs />\n      { winner === STATE_WINNER.HUMAN && <WinnerScreen winner={STATE_WINNER.HUMAN} />}\n      { winner === STATE_WINNER.IA && <WinnerScreen winner={STATE_WINNER.IA} />}\n      { winner === STATE_WINNER.NONE && <WinnerScreen winner={STATE_WINNER.NONE} />}\n    </div>\n  );\n}\n\nexport default GameLayout;","export const randomTurnSelection = () => {\n  let option = [1,-1];\n  return option[Math.floor(Math.random() * 2)];\n}","import React, { useState } from \"react\";\nimport GameContext from \"contexts/GameContext\"\n\nconst GameProvider = ({ children }) => {\n  const [turn, setTurn] = useState(1);\n\n  const changeTurn = (turn) => {\n    setTurn(turn);\n  }\n\n  return (\n    <GameContext.Provider\n      value={{\n        turn,\n        changeTurn,      \n      }}\n    >\n      {children}\n    </GameContext.Provider>\n  );\n}\n\nexport default GameProvider;","import React from 'react';\nimport GameLayout from \"components/GameLayout\"\nimport GameProvider from \"providers/GameProvider\";\n\nconst GamePage = () => {\n  return (\n      <GameProvider>\n        <GameLayout />\n      </GameProvider>\n  )\n}\n\nexport default GamePage;\n\n"],"sourceRoot":""}